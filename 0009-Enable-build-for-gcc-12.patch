From 0cbfecb8ba536ab366473110b1d00a8d3e23218f Mon Sep 17 00:00:00 2001
From: William Douglas <william.douglas@intel.com>
Date: Tue, 12 Apr 2022 09:40:24 -0700
Subject: [PATCH] Enable build for gcc 12

Taken from fedora:
https://src.fedoraproject.org/rpms/ceph/raw/rawhide/f/0017-gcc-12-omnibus.patch

Signed-off-by: William Douglas <william.douglas@intel.com>
---
 src/common/LogEntry.cc                    | 2 +-
 src/common/dout.h                         | 8 ++++++--
 src/include/buffer.h                      | 1 +
 src/s3select/include/s3select_functions.h | 2 +-
 src/test/librados/tier_cxx.cc             | 4 ++--
 src/test/test_trans.cc                    | 2 +-
 6 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/src/common/LogEntry.cc b/src/common/LogEntry.cc
index dfa1ab2fa..f7a7a2bcc 100644
--- a/src/common/LogEntry.cc
+++ b/src/common/LogEntry.cc
@@ -183,7 +183,7 @@ string clog_type_to_string(clog_type t)
       return "crit";
     default:
       ceph_abort();
-      return 0;
+      return "";
   }
 }
 
diff --git a/src/common/dout.h b/src/common/dout.h
index 421222d53..fd777bc1b 100644
--- a/src/common/dout.h
+++ b/src/common/dout.h
@@ -99,11 +99,15 @@ namespace ceph::dout {
 template<typename T>
 struct dynamic_marker_t {
   T value;
-  operator T() const { return value; }
+  // constexpr ctor isn't needed as it's an aggregate type
+  constexpr operator T() const { return value; }
 };
 
 template<typename T>
-dynamic_marker_t<T> need_dynamic(T&& t) {
+constexpr dynamic_marker_t<T> need_dynamic(T&& t) {
+  // deprecated in C++17 but that's fine for testing
+  static_assert(std::is_literal_type_v<T>);
+  static_assert(std::is_literal_type_v<dynamic_marker_t<T>>);
   return dynamic_marker_t<T>{ std::forward<T>(t) };
 }
 
diff --git a/src/include/buffer.h b/src/include/buffer.h
index 7c8f90e9f..116ed1f4c 100644
--- a/src/include/buffer.h
+++ b/src/include/buffer.h
@@ -38,6 +38,7 @@
 # include <sys/mman.h>
 #endif
 
+#include <memory>
 #include <iosfwd>
 #include <iomanip>
 #include <list>
diff --git a/src/s3select/include/s3select_functions.h b/src/s3select/include/s3select_functions.h
index 77b3db3a7..7e610e33e 100644
--- a/src/s3select/include/s3select_functions.h
+++ b/src/s3select/include/s3select_functions.h
@@ -142,7 +142,7 @@ public:
 
   virtual std::string  print(int ident)
   {
-    return std::string(0);
+    return std::string("");
   }
 
   void push_argument(base_statement* arg)
diff --git a/src/test/librados/tier_cxx.cc b/src/test/librados/tier_cxx.cc
index b5032e9af..0a1d797b3 100644
--- a/src/test/librados/tier_cxx.cc
+++ b/src/test/librados/tier_cxx.cc
@@ -114,7 +114,7 @@ using ceph::crypto::SHA1;
 #include "rgw/rgw_common.h"
 
 void check_fp_oid_refcount(librados::IoCtx& ioctx, std::string foid, uint64_t count,
-			   std::string fp_algo = NULL)
+			   std::string fp_algo = "")
 {
   bufferlist t;
   int size = foid.length();
@@ -142,7 +142,7 @@ void check_fp_oid_refcount(librados::IoCtx& ioctx, std::string foid, uint64_t co
   ASSERT_LE(count, refs.count());
 }
 
-string get_fp_oid(string oid, std::string fp_algo = NULL)
+string get_fp_oid(string oid, std::string fp_algo = "")
 {
   if (fp_algo == "sha1") {
     unsigned char fingerprint[CEPH_CRYPTO_SHA1_DIGESTSIZE + 1];
diff --git a/src/test/test_trans.cc b/src/test/test_trans.cc
index b52c6109c..dc3cfa830 100644
--- a/src/test/test_trans.cc
+++ b/src/test/test_trans.cc
@@ -51,7 +51,7 @@ int main(int argc, const char **argv)
   cout << "#dev " << filename << std::endl;
   cout << "#mb " << mb << std::endl;
 
-  ObjectStore *fs = new FileStore(cct.get(), filename, NULL);
+  ObjectStore *fs = new FileStore(cct.get(), filename, "");
   if (fs->mount() < 0) {
     cout << "mount failed" << std::endl;
     return -1;
-- 
2.35.1

